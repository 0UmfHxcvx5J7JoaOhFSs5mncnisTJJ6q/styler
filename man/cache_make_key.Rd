% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-cache.R
\name{cache_make_key}
\alias{cache_make_key}
\title{\itemize{
\item Functions created with \code{purrr::partial()} are not identical when compared
with \code{identical()}
(\href{https://stackoverflow.com/questions/58656033/when-are-purrrpartial-ized-functions-identical}{StackOverflow})
\item except when they have the exact same parent environment, which must be an
object created and then passed to \code{purrr::partial(.env = ...)}, not
created in-place.
\item \code{purrr::partial()} seems to ignore \code{.env} after version 0.2.5, so until
this is fixed, we'd have to work with version 0.2.5.
\item Our caching backend package, \code{R.cache}, uses
\code{R.cache:::getChecksum.default} (which uses \code{digest::digest()}) to hash the
input. The latter does not seem to care if the environments are exactly
equal (see 'Exampels').
\item However, when passing a list to \code{digest::digest()} that contains other
components, it seems to care.
}}
\usage{
cache_make_key(text, transformers)
}
\description{
\itemize{
\item Functions created with \code{purrr::partial()} are not identical when compared
with \code{identical()}
(\href{https://stackoverflow.com/questions/58656033/when-are-purrrpartial-ized-functions-identical}{StackOverflow})
\item except when they have the exact same parent environment, which must be an
object created and then passed to \code{purrr::partial(.env = ...)}, not
created in-place.
\item \code{purrr::partial()} seems to ignore \code{.env} after version 0.2.5, so until
this is fixed, we'd have to work with version 0.2.5.
\item Our caching backend package, \code{R.cache}, uses
\code{R.cache:::getChecksum.default} (which uses \code{digest::digest()}) to hash the
input. The latter does not seem to care if the environments are exactly
equal (see 'Exampels').
\item However, when passing a list to \code{digest::digest()} that contains other
components, it seems to care.
}
}
\examples{
add <- function(x, y) {
x + y
}
add1 <- purrr::partial(add, x = 1)
add2 <- purrr::partial(add, x = 1)
identical(add1, add2)
identical(digest::digest(add1), digest::digest(add2))
identical(digest::digest(styler::tidyverse_style()), digest::digest(styler::tidyverse_style()))
Complicating elements:

*
}
